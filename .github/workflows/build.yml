name: Build, Verify, and Publish Executable

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    # Step 4: Build executable
    - name: Build Executable
      run: |
        pyinstaller --onefile --name rl_drop_opener main.py
        mkdir build_artifacts
        move dist\rl_drop_opener.exe build_artifacts\rl_drop_opener.exe

    # Step 5: Generate SHA256 Checksum
    - name: Generate SHA256 Checksum
      id: checksum
      run: |
        $checksum = CertUtil -hashfile build_artifacts\rl_drop_opener.exe SHA256 | Select-String -Pattern "^[A-F0-9]{64}$"
        echo "checksum=$checksum" >> $env:GITHUB_OUTPUT
      shell: pwsh

    # Step 6: Upload artifact for debugging (optional)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build_artifacts/

  release:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build_artifacts/

    - name: Get Latest Tag
      id: get_latest_tag
      uses: actions/github-script@v6
      with:
        script: |
          const tags = await github.rest.repos.listTags({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 1,
            page: 1
          });
          if (tags.data.length === 0) return "v0.1.0"; // Default for first release
          return tags.data[0].name;
        result-encoding: string

    - name: Increment Tag Version
      id: increment_tag
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.result }}
        prefix="v"
        version=${latest_tag#"$prefix"}
        IFS='.' read -r major minor patch <<< "$version"
        new_version="$prefix$major.$minor.$((patch + 1))"
        echo "new_tag=$new_version" >> $GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: build_artifacts/rl_drop_opener.exe
        tag_name: ${{ env.new_tag }}
        body: ${{ needs.build-and-publish.outputs.checksum }}
        # note you'll typically need to create a personal access token
        # with permissions to create releases in the other repo
        token: ${{ secrets.GITHUB_TOKEN }}
